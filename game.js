
var buttonColors = ["green", "blue", "yellow", "red"]; // Array of available button colors
var gamePattern = []; // Sequence of colors generated by the game
var userClickedPattern = []; // Sequence of colors clicked by the user
var keyPressed = false; // Tracks if the game has started
var level = 0; // Current game level

// Initializes the game on the first key press
$(document).on("keypress", function() {
    if (!keyPressed) {
        $("h1").text("Level " + level);
        nextSequence(); // Start the sequence
        keyPressed = true; // Prevent further key presses
    }     
});

// Handles button clicks by the user
$(".btn").on("click", function() {
    var userChosenColor = $(this).attr('id');
    animatePress(userChosenColor); // Visual feedback for button press
    playSound(userChosenColor); // Play button sound
    
    userClickedPattern.push(userChosenColor); // Record user input
    console.log("User pattern length: " + (userClickedPattern.length - 1));
    checkAnswer(userClickedPattern.length - 1); // Validate user input
});

function nextSequence() {
    level++; // Increment level
    $("h1").text("Level " + level); // Update level display
    var randomNum = Math.floor(Math.random() * 4); // Random index
    var randomChosenColor = buttonColors[randomNum]; // Select color
    
    $("." + randomChosenColor).fadeOut(70).fadeIn(70); // Animate button
    playSound(randomChosenColor); // Play corresponding sound
    gamePattern.push(randomChosenColor); // Add color to game sequence
    
    console.log("Game pattern: " + gamePattern); // Debugging
}

function playSound(buttonClicked) {
    var audio = new Audio("sounds/" + buttonClicked + ".mp3");
    audio.play(); // Play the sound for the clicked button
}

function animatePress(currentColor) {
    $("#" + currentColor).addClass("pressed"); // Add visual effect
    setTimeout(function() {
        $("#" + currentColor).removeClass("pressed"); // Remove visual effect
    }, 100);
}

function checkAnswer(currentLevel) {
    console.log("User pattern: " + userClickedPattern); // Debugging
    if (userClickedPattern[currentLevel] === gamePattern[currentLevel]) {
        if (userClickedPattern.length === gamePattern.length) {
            console.log("Success");
            setTimeout(function() {
                nextSequence(); // Proceed to next level
                userClickedPattern = []; // Reset user pattern
            }, 1000);
        }
    } else {
        console.log("Wrong");
        $("h1").text("Game Over, Press Any Key to Restart");
        var audio = new Audio("sounds/wrong.mp3");
        audio.play(); // Play game over sound
        $("body").addClass("game-over"); // Add game over style
        setTimeout(function() {
            $("body").removeClass("game-over"); // Remove game over style
        }, 200);
        startOver(); // Reset game
    }
}

function startOver() {
    level = 0; // Reset level
    gamePattern = []; // Clear game pattern
    keyPressed = false; // Allow game restart
    userClickedPattern = []; // Clear user input
}






//the second if statement specifically checks for a condition where no alternative actions are required 
//if the condition isn't met. The code will simply exit the function and continue to wait for further input, 
//hence there's no need for an else or else if clause.

//The absence of an else or else if doesn't mean the game doesn't know what to do; it simply means the game is designed to wait for the next input by default.
//The code only advances to the next sequence (via nextSequence()) when the user correctly completes the current sequence. If not, the code keeps checking until the user either completes the sequence or makes a mistake.


//fadeOut and fadeIn methods in jQuery are used to create smooth transitions for showing or hiding elements. They control the opacity of an element, making it appear or disappear gradually.




